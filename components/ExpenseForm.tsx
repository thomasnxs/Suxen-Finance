// GastosApp/components/ExpenseForm.tsx
import React, { useState } from 'react';
import { Button, ScrollView, StyleSheet, Switch, Text, TextInput, TouchableOpacity, View } from 'react-native';
import { ThemeColors } from '../constants/colors';
// A interface ExpenseCategory aqui jÃ¡ deve estar atualizada com 'cc_payment' no type
import { commonExpenseSuggestions, ExpenseCategory } from '../constants/commonExpenses';
import { useTheme } from '../contexts/ThemeContext';
import { Transaction } from '../types';

interface ExpenseFormProps {
Â  onAddTransaction: (transaction: Omit<Transaction, 'id' | 'date' | 'type'> & { categoryDetails?: ExpenseCategory; notes?: string }) => void;
}

const getStyles = (colors: ThemeColors, isDark: boolean) => StyleSheet.create({
Â  container: {
Â  Â  padding: 20,
Â  Â  backgroundColor: colors.card,
Â  Â  borderRadius: 10,
Â  Â  marginHorizontal: 15,
Â  Â  marginBottom: 15,
Â  Â  shadowColor: isDark ? colors.text : '#000',
Â  Â  shadowOffset: { width: 0, height: 2 },
Â  Â  shadowOpacity: isDark ? 0.45 : 0.23,
Â  Â  shadowRadius: isDark ? 5.62 : 2.62,
Â  Â  elevation: isDark ? 7 : 4,
Â  },
Â  title: {
Â  Â  fontSize: 18,
Â  Â  fontWeight: 'bold',
Â  Â  marginBottom: 15,
Â  Â  textAlign: 'center',
Â  Â  color: colors.text,
Â  },
Â  input: {
Â  Â  height: 45,
Â  Â  borderColor: colors.border,
Â  Â  borderWidth: 1,
Â  Â  marginBottom: 12,
Â  Â  paddingHorizontal: 10,
Â  Â  borderRadius: 5,
Â  Â  backgroundColor: colors.background,
Â  Â  color: colors.text,
Â  Â  fontSize: 16,
Â  },
Â  notesInput: {
Â  Â  minHeight: 60,
Â  Â  textAlignVertical: 'top',
Â  Â  paddingTop: 10,
Â  },
Â  descriptionButton: {
Â  Â  minHeight: 45,
Â  Â  borderColor: colors.border,
Â  Â  borderWidth: 1,
Â  Â  marginBottom: 12,
Â  Â  paddingHorizontal: 10,
Â  Â  paddingVertical: 12,
Â  Â  borderRadius: 5,
Â  Â  justifyContent: 'center',
Â  Â  backgroundColor: colors.background,
Â  },
Â  descriptionButtonText: {
Â  Â  fontSize: 16,
Â  },
Â  suggestionsContainer: {
Â  Â  maxHeight: 180,
Â  Â  borderColor: colors.border,
Â  Â  borderWidth: 1,
Â  Â  borderRadius: 5,
Â  Â  marginBottom: 10,
Â  Â  backgroundColor: colors.card, // Pode ser diferente do fundo principal para destaque
Â  },
Â  suggestionsScroll: {},
Â  suggestionItem: {
Â  Â  paddingVertical: 12,
Â  Â  paddingHorizontal: 10,
Â  Â  borderBottomWidth: 1,
Â  Â  borderBottomColor: colors.border,
Â  },
Â  suggestionText: {
Â  Â  fontSize: 16,
Â  Â  color: colors.text,
Â  },
Â  suggestionTextBold: {
Â  Â  fontSize: 16,
Â  Â  fontWeight: 'bold',
Â  Â  color: colors.primary,
Â  },
Â  switchContainer: {
Â  Â  flexDirection: 'row',
Â  Â  alignItems: 'center',
Â  Â  justifyContent: 'space-evenly',
Â  Â  marginBottom: 20,
Â  Â  paddingVertical: 10,
Â  },
Â  paymentLabel: {
Â  Â  fontSize: 16,
Â  },
Â  activeText: {
Â  Â  fontWeight: 'bold',
Â  Â  color: colors.primary,
Â  },
Â  inactiveText: {
Â  Â  color: colors.disabled,
Â  },
Â  infoText: {
Â  Â  textAlign: 'center',
Â  Â  color: colors.secondaryText,
Â  Â  fontStyle: 'italic',
Â  Â  marginBottom: 15,
Â  }
});

const ExpenseForm: React.FC<ExpenseFormProps> = ({ onAddTransaction }) => {
Â  const { colors, isDark } = useTheme();
Â  const styles = getStyles(colors, isDark);

Â  const [description, setDescription] = useState<string>('');
Â  const [selectedCategory, setSelectedCategory] = useState<ExpenseCategory | null>(null);
Â  const [amount, setAmount] = useState<string>('');
Â  const [notes, setNotes] = useState<string>('');
Â  const [paymentMethod, setPaymentMethod] = useState<'saldo' | 'cartao'>('saldo'); // Default Ã© saldo
Â  const [showSuggestions, setShowSuggestions] = useState<boolean>(false);

Â  const handleSubmit = () => {
Â  Â  const numericAmount = parseFloat(amount.replace(',', '.'));
Â  Â  const finalDescription = selectedCategory ? selectedCategory.name : description;

Â  Â  if (finalDescription.trim() && !isNaN(numericAmount) && numericAmount > 0) {
Â  Â  Â  onAddTransaction({
Â  Â  Â  Â  description: finalDescription.trim(),
Â  Â  Â  Â  amount: numericAmount,
        // Se for investimento ou pagamento de fatura, o mÃ©todo de pagamento Ã© fixo, senÃ£o usa o do switch
Â  Â  Â  Â  paymentMethod: selectedCategory?.type === 'investment' 
                        ? 'para_investimento' 
                        : (selectedCategory?.type === 'cc_payment' ? 'saldo' : paymentMethod),
Â  Â  Â  Â  categoryDetails: selectedCategory || undefined,
Â  Â  Â  Â  notes: notes.trim() || undefined,
Â  Â  Â  });
Â  Â  Â  setDescription('');
Â  Â  Â  setSelectedCategory(null);
Â  Â  Â  setAmount('');
Â  Â  Â  setNotes('');
Â  Â  Â  setShowSuggestions(false);
      setPaymentMethod('saldo'); // Reseta para saldo
Â  Â  } else {
Â  Â  Â  alert('Por favor, preencha descriÃ§Ã£o e valor vÃ¡lidos.');
Â  Â  }
Â  };

Â  const selectSuggestion = (category: ExpenseCategory) => {
Â  Â  setSelectedCategory(category);
Â  Â  setDescription(category.name); // Para consistÃªncia se a lÃ³gica depender do 'description'
Â  Â  setShowSuggestions(false);
    // Se for investimento ou pagamento de fatura, o mÃ©todo de pagamento nÃ£o Ã© 'cartao'
    if (category.type === 'investment' || category.type === 'cc_payment') {
        setPaymentMethod('saldo');
    }
Â  };

Â  const handleDescriptionTextChange = (text: string) => {
Â  Â  setDescription(text);
Â  Â  setSelectedCategory(null); // Se o usuÃ¡rio digita, anula a categoria selecionada
Â  };

Â  const displayedDescription = selectedCategory ? `${selectedCategory.emoji} ${selectedCategory.name}` : description;
Â  const descriptionButtonTextColor = description || selectedCategory ? colors.text : colors.placeholder;

  // Determina se o switch de mÃ©todo de pagamento deve ser mostrado
  const showPaymentMethodSwitch = selectedCategory?.type !== 'investment' && selectedCategory?.type !== 'cc_payment';

  // Define o tÃ­tulo do botÃ£o e a cor com base na categoria
  let buttonTitle = "Adicionar Gasto";
  let buttonColor = colors.primary;
  if (selectedCategory?.type === 'investment') {
    buttonTitle = "Adicionar Investimento ðŸ“ˆ";
    buttonColor = colors.invested;
  } else if (selectedCategory?.type === 'cc_payment') {
    buttonTitle = "Pagar Fatura ðŸ’³";
    buttonColor = colors.info; // Ou outra cor de sua escolha, ex: warning
  }

Â  return (
Â  Â  <View style={styles.container}>
Â  Â  Â  <Text style={styles.title}>Registrar SaÃ­da / Investimento / Pag. Fatura</Text>

Â  Â  Â  <TouchableOpacity
Â  Â  Â  Â  style={styles.descriptionButton}
Â  Â  Â  Â  onPress={() => setShowSuggestions(prev => !prev)}
Â  Â  Â  >
Â  Â  Â  Â  <Text style={[styles.descriptionButtonText, { color: descriptionButtonTextColor }]}>
Â  Â  Â  Â  Â  {displayedDescription || "Clique para selecionar ou digitar descriÃ§Ã£o"}
Â  Â  Â  Â  </Text>
Â  Â  Â  </TouchableOpacity>

Â  Â  Â  {showSuggestions && (
Â  Â  Â  Â  <View style={styles.suggestionsContainer}>
Â  Â  Â  Â  Â  <ScrollView nestedScrollEnabled={true} style={styles.suggestionsScroll}>
Â  Â  Â  Â  Â  Â  <TouchableOpacity
Â  Â  Â  Â  Â  Â  Â  Â  style={styles.suggestionItem}
Â  Â  Â  Â  Â  Â  Â  Â  onPress={() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setDescription('');
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setSelectedCategory(null);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setShowSuggestions(false);
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <Text style={styles.suggestionTextBold}>-- Digitar Personalizado --</Text>
Â  Â  Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  Â  Â  Â  {commonExpenseSuggestions.map((category) => (
Â  Â  Â  Â  Â  Â  Â  <TouchableOpacity
Â  Â  Â  Â  Â  Â  Â  Â  key={category.key}
Â  Â  Â  Â  Â  Â  Â  Â  style={styles.suggestionItem}
Â  Â  Â  Â  Â  Â  Â  Â  onPress={() => selectSuggestion(category)}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <Text style={styles.suggestionText}>{category.emoji} {category.name}</Text>
Â  Â  Â  Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </ScrollView>
Â  Â  Â  Â  </View>
Â  Â  Â  )}

Â  Â  Â  {!selectedCategory && !showSuggestions && (
Â  Â  Â  Â  Â <TextInput
Â  Â  Â  Â  Â  Â  style={styles.input}
Â  Â  Â  Â  Â  Â  placeholder="Ou digite a descriÃ§Ã£o aqui..."
Â  Â  Â  Â  Â  Â  placeholderTextColor={colors.placeholder}
Â  Â  Â  Â  Â  Â  value={description}
Â  Â  Â  Â  Â  Â  onChangeText={handleDescriptionTextChange}
Â  Â  Â  Â  />
Â  Â  Â  )}


Â  Â  Â  <TextInput
Â  Â  Â  Â  style={styles.input}
Â  Â  Â  Â  placeholder="Valor (Ex: 15.50)"
Â  Â  Â  Â  placeholderTextColor={colors.placeholder}
Â  Â  Â  Â  keyboardType="numeric"
Â  Â  Â  Â  value={amount}
Â  Â  Â  Â  onChangeText={setAmount}
Â  Â  Â  />

Â  Â  Â  <TextInput
Â  Â  Â  Â  style={[styles.input, styles.notesInput]}
Â  Â  Â  Â  placeholder="ObservaÃ§Ãµes (Ex: comprei na promoÃ§Ã£o)"
Â  Â  Â  Â  placeholderTextColor={colors.placeholder}
Â  Â  Â  Â  value={notes}
Â  Â  Â  Â  onChangeText={setNotes}
Â  Â  Â  Â  multiline
Â  Â  Â  Â  numberOfLines={2} // SugestÃ£o, pode nÃ£o ter efeito em todos os platforms/inputs
Â  Â  Â  />

Â  Â  Â  {showPaymentMethodSwitch && (
Â  Â  Â  Â  <View style={styles.switchContainer}>
Â  Â  Â  Â  Â  <Text style={[styles.paymentLabel, paymentMethod === 'saldo' ? styles.activeText : styles.inactiveText]}>
Â  Â  Â  Â  Â  Â  Saldo
Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  <Switch
Â  Â  Â  Â  Â  Â  trackColor={{ false: colors.switchTrackFalse, true: colors.switchTrackTrue }}
Â  Â  Â  Â  Â  Â  thumbColor={paymentMethod === 'cartao' ? colors.accent : colors.switchThumb}
Â  Â  Â  Â  Â  Â  ios_backgroundColor={colors.border} // Cor de fundo para iOS quando desativado
Â  Â  Â  Â  Â  Â  onValueChange={() => setPaymentMethod(prev => prev === 'saldo' ? 'cartao' : 'saldo')}
Â  Â  Â  Â  Â  Â  value={paymentMethod === 'cartao'}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <Text style={[styles.paymentLabel, paymentMethod === 'cartao' ? styles.activeText : styles.inactiveText]}>
Â  Â  Â  Â  Â  Â  CartÃ£o
Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  </View>
Â  Â  Â  )}
Â  Â  Â  {(selectedCategory?.type === 'investment' || selectedCategory?.type === 'cc_payment') && (
Â  Â  Â  Â  <Text style={styles.infoText}>
          {selectedCategory?.type === 'investment' 
            ? "Este valor serÃ¡ deduzido do saldo e adicionado aos investimentos." 
            : "Este valor serÃ¡ deduzido do saldo e da fatura do cartÃ£o."}
        </Text>
Â  Â  Â  )}

Â  Â  Â  <Button
Â  Â  Â  Â  title={buttonTitle}
Â  Â  Â  Â  onPress={handleSubmit}
Â  Â  Â  Â  color={buttonColor}
Â  Â  Â  />
Â  Â  </View>
Â  );
};

export default ExpenseForm;
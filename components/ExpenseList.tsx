// GastosApp/components/ExpenseList.tsx
import { FontAwesome } from '@expo/vector-icons';
import React from 'react';
import { FlatList, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { ThemeColors } from '../constants/colors'; // A interface ThemeColors agora inclui separatorLine
import { useTheme } from '../contexts/ThemeContext';
import { Transaction } from '../types';

interface ExpenseListProps {
Â  transactions: Transaction[];
Â  onOpenDetailModal: (transaction: Transaction) => void; 
Â  headerContent?: React.ReactNode;
}

const getItemBackgroundColor = (transaction: Transaction, colors: ThemeColors): string => {
  if (transaction.type === 'income') {
    return colors.successTransparent;
  }
  if (transaction.type === 'investment') {
    return colors.investedTransparent;
  }
  if (transaction.type === 'expense') {
    if (transaction.paymentMethod === 'cartao') {
      return colors.primaryTransparent; 
    }
    return colors.dangerTransparent; 
  }
  return colors.card;
};

const getStyles = (colors: ThemeColors, isDark: boolean) => StyleSheet.create({
Â  listScreenContainer: {
Â  Â  flex: 1,
Â  },
Â  flatListContentContainer: {
Â  Â  paddingBottom: 20,
Â  Â  flexGrow: 1,
Â  },
  itemTouchable: {
    borderRadius: 10,
    marginBottom: 10, 
    marginHorizontal: 15,
    shadowColor: isDark ? '#000' : '#333',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: isDark ? 0.3 : 0.1,
    shadowRadius: isDark ? 4 : 2.5,
    elevation: isDark ? 4 : 3,
  },
Â  itemContainer: {
Â  Â  flexDirection: 'row',        
Â  Â  alignItems: 'center',       
Â  Â  paddingVertical: 40,        
Â  Â  paddingHorizontal: 15, // Levemente aumentado para dar mais espaÃ§o interno      
Â  },
Â  descriptionText: {            
Â  Â  fontSize: 15,               
Â  Â  fontWeight: '500',          
Â  Â  color: colors.text,
    flexGrow: 1, // Permite que a descriÃ§Ã£o cresÃ§a para preencher o espaÃ§o
    flexShrink: 1, // Permite que a descriÃ§Ã£o encolha se necessÃ¡rio
    // marginRight nÃ£o Ã© mais necessÃ¡rio aqui, o separador terÃ¡ marginHorizontal
Â  },
  separatorText: {
    fontSize: 18,
    color: colors.separatorLine, // USANDO A NOVA COR DO TEMA
    marginHorizontal: 10,       // EspaÃ§amento consistente para os separadores
  },
Â  amountText: {                  
Â  Â  fontSize: 16,               
Â  Â  fontWeight: 'bold',
    // marginHorizontal nÃ£o Ã© mais necessÃ¡rio, o separador jÃ¡ tem
Â  },
  arrowIcon: {
    // NÃ£o precisa de margem especÃ­fica, o Ãºltimo separador jÃ¡ tem marginHorizontal
  },
Â  dangerColor: { color: colors.danger },
Â  successColor: { color: colors.success },
Â  investedColor: { color: colors.invested },

Â  emptyContainer: { flex: 1, alignItems: 'center', justifyContent: 'center', padding: 20, marginTop: 30, },
Â  emptyText: { fontSize: 16, color: colors.secondaryText, textAlign: 'center', },
});

const ExpenseList: React.FC<ExpenseListProps> = ({ transactions, onOpenDetailModal, headerContent }) => {
Â  const { colors, isDark } = useTheme();
Â  const styles = getStyles(colors, isDark);

Â  const getTransactionVisuals = (transaction: Transaction): { color: string; arrow: 'arrow-up' | 'arrow-down' } => {
Â  Â  if (transaction.type === 'income') {
      return { color: styles.successColor.color, arrow: 'arrow-down' }; // ENTRADA: Verde, Seta para BAIXO
    }
Â  Â  if (transaction.type === 'investment') {
      return { color: styles.investedColor.color, arrow: 'arrow-up' };   // INVESTIMENTO: Cor de investimento, Seta para CIMA
    }
    // DESPESA (incluindo pagamento de fatura): Vermelho, Seta para CIMA
Â  Â  return { color: styles.dangerColor.color, arrow: 'arrow-up' }; 
Â  };

Â  const renderItem = ({ item }: { item: Transaction }) => {
    const { color: iconAndTextColor, arrow: arrowName } = getTransactionVisuals(item);
    const itemBackgroundColor = getItemBackgroundColor(item, colors);
    const displayDescription = item.category === "Pagamento de Fatura CC" ? "Pagamento Fatura CC" : item.description;
    
    return (
    <TouchableOpacity 
        style={[styles.itemTouchable, { backgroundColor: itemBackgroundColor }]} 
        onPress={() => onOpenDetailModal(item)}
    >
        <View style={styles.itemContainer}>
    Â  Â  Â  <Text 
              style={styles.descriptionText} 
              // numberOfLines e ellipsizeMode removidos para permitir quebra de linha
            > 
                {displayDescription}
            </Text>
            <Text style={styles.separatorText}>|</Text>
    Â  Â  Â  <Text style={[styles.amountText, { color: iconAndTextColor }]}>
    Â  Â  Â  Â  R$ {item.amount.toFixed(2).replace('.', ',')}
    Â  Â  Â  </Text>
            <Text style={styles.separatorText}>|</Text>
            <FontAwesome 
              name={arrowName} 
              size={20} 
              color={iconAndTextColor} 
              style={styles.arrowIcon} 
            />
        </View>
    </TouchableOpacity>
    );
  };

Â  const ListEmptyComponent = () => ( <View style={styles.emptyContainer}><Text style={styles.emptyText}>Nenhuma transaÃ§Ã£o registrada ainda. ðŸš€</Text></View>);

Â  return (
Â  Â  <View style={styles.listScreenContainer}>
Â  Â  Â  <FlatList
Â  Â  Â  Â  data={transactions} 
Â  Â  Â  Â  renderItem={renderItem}
Â  Â  Â  Â  keyExtractor={item => item.id}
Â  Â  Â  Â  ListHeaderComponent={<>{headerContent}</>}
Â  Â  Â  Â  ListEmptyComponent={ListEmptyComponent}
Â  Â  Â  Â  contentContainerStyle={styles.flatListContentContainer}
Â  Â  Â  Â  keyboardShouldPersistTaps="handled"
Â  Â  Â  />
Â  Â  </View>
Â  );
};

export default ExpenseList;
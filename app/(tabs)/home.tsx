// GastosApp/app/(tabs)/home.tsx
import { FontAwesome } from '@expo/vector-icons';
import { useNavigation } from 'expo-router';
import React, { useEffect, useState } from 'react';
import {
  ActivityIndicator, Alert,
  KeyboardAvoidingView,
  Platform,
  Modal as RNModal,
  SafeAreaView,
  StatusBar,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View
} from 'react-native';

import AddExpenseModal from '../../components/AddExpenseModal';
import BalanceDisplay from '../../components/BalanceDisplay';
import CartaoDetailModal from '../../components/CartaoDetailModal';
import EditTransactionModal from '../../components/EditTransactionModal';
import ExpenseList from '../../components/ExpenseList';
import GradientButton from '../../components/GradientButton';
import PagarFaturaModal from '../../components/PagarFaturaModal';
import ResgatarInvestimentoModal from '../../components/ResgatarInvestimentoModal';
import TransactionDetailModal from '../../components/TransactionDetailModal';
import { ThemeColors } from '../../constants/colors';
import { commonExpenseSuggestions, ExpenseCategory } from '../../constants/commonExpenses';
// Importando o TIPO e o HOOK do InitialDataContext
import { useInitialData } from '../../contexts/InitialDataContext';
import { useTheme } from '../../contexts/ThemeContext';
import {
  loadTransactions,
  saveCreditCardBill,
  saveTransactions
} from '../../services/storage';
import { Transaction } from '../../types';

const IOS_HEADER_OFFSET = 64;

// FunÃ§Ã£o auxiliar para formataÃ§Ã£o de moeda, crucial para os Alertas
const formatCurrency = (value: number): string => {
  return `R$ ${value.toFixed(2).replace('.', ',')}`;
};

// AddIncomeModal (como vocÃª enviou)
const AddIncomeModal: React.FC<{visible: boolean, onClose: () => void, onAddIncome: (amount: number, description: string) => void}> =
Â ({visible, onClose, onAddIncome}) => {
Â  const { colors } = useTheme();
Â  const [amount, setAmount] = useState('');
Â  const [description, setDescription] = useState('');

Â  const handleAmountChange = (text: string) => {
Â  Â  let cleanedText = text.replace(/[^0-9.,]/g, ''); 
Â  Â  const parts = cleanedText.split(/[.,]/);
Â  Â  if (parts.length > 1) {
Â  Â  Â  const integerPart = parts[0];
Â  Â  Â  let decimalPart = parts.slice(1).join(''); 
Â  Â  Â  if (decimalPart.length > 2) {
Â  Â  Â  Â  decimalPart = decimalPart.substring(0, 2);
Â  Â  Â  }
Â  Â  Â  const originalSeparator = cleanedText.includes(',') && cleanedText.indexOf(',') < (cleanedText.includes('.') ? cleanedText.indexOf('.') : Infinity) 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ? ',' 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â : (cleanedText.includes('.') ? '.' : '');
Â  Â  Â  cleanedText = integerPart + (originalSeparator ? originalSeparator : (decimalPart.length > 0 ? '.' : '')) + decimalPart;
Â  Â  }
Â  Â  setAmount(cleanedText);
Â  };

Â  const handleAdd = () => {
Â  Â  const numericAmount = parseFloat(amount.replace(',', '.')) || 0; 
Â  Â  if (description.trim() && numericAmount > 0) {
Â  Â  Â  onAddIncome(numericAmount, description.trim());
Â  Â  Â  setAmount('');
Â  Â  Â  setDescription('');
Â  Â  Â  onClose();
Â  Â  } else {
Â  Â  Â  Alert.alert("Erro", "Por favor, preencha descriÃ§Ã£o e um valor numÃ©rico positivo vÃ¡lido.");
Â  Â  }
Â  };

Â  const themedModalStyles = getModalStyles(colors);
Â  return (
Â  Â  <RNModal visible={visible} transparent={true} animationType="slide" onRequestClose={onClose}>
Â  Â  Â  <KeyboardAvoidingView behavior={Platform.OS === "ios" ? "padding" : "height"} style={themedModalStyles.keyboardAvoidingContainer} >
Â  Â  Â  Â  <View style={themedModalStyles.centeredView}>
Â  Â  Â  Â  Â  <View style={[themedModalStyles.modalView, { backgroundColor: colors.card, maxHeight: 'auto' }]}>
Â  Â  Â  Â  Â  Â  <Text style={[themedModalStyles.modalText, { color: colors.text }]}>Adicionar Entrada ðŸ’°</Text>
Â  Â  Â  Â  Â  Â  <TextInput style={[themedModalStyles.input, { backgroundColor: colors.background, color: colors.text, borderColor: colors.border }]} placeholder="DescriÃ§Ã£o (Ex: SalÃ¡rio, Freelance)" placeholderTextColor={colors.placeholder} value={description} onChangeText={setDescription} />
Â  Â  Â  Â  Â  Â  <TextInput 
Â  Â  Â  Â  Â  Â  Â  Â  style={[themedModalStyles.input, { backgroundColor: colors.background, color: colors.text, borderColor: colors.border }]} 
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Valor do Aporte (Ex: 150,50)" 
Â  Â  Â  Â  Â  Â  Â  Â  placeholderTextColor={colors.placeholder} 
Â  Â  Â  Â  Â  Â  Â  Â  keyboardType="numeric" 
Â  Â  Â  Â  Â  Â  Â  Â  value={amount} 
Â  Â  Â  Â  Â  Â  Â  Â  onChangeText={handleAmountChange} 
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <View style={themedModalStyles.buttonContainer}>
Â  Â  Â  Â  Â  Â  Â  <GradientButton title="Cancelar" onPress={onClose} type="danger" style={{flex: 1, marginRight: themedModalStyles.buttonSpacer.width }}/>
Â  Â  Â  Â  Â  Â  Â  <GradientButton title="Adicionar" onPress={handleAdd} type="primary" style={{flex: 1}}/>
Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  </View>
Â  Â  Â  </KeyboardAvoidingView>
Â  Â  </RNModal>
Â  );
};

export default function HomeScreen() {
Â  const { colors, isDark } = useTheme(); 
Â  const contextValues = useInitialData(); 
  
  // DesestruturaÃ§Ã£o segura dos valores do contexto
  const initialAccountBalance = contextValues?.initialAccountBalance ?? 0;
  const totalInvested = contextValues?.totalInvested ?? 0;
  const creditCardLimit = contextValues?.creditCardLimit ?? 0;
  const initialCreditCardBill = contextValues?.creditCardBill ?? 0;
  const isLoadingInitialData = contextValues?.isLoadingData ?? true;
  const updateTotalInvestedOnly = contextValues?.updateTotalInvestedOnly || (async () => {}); // Fallback seguro
  const userName = contextValues?.userName || '';

Â  const [currentBalance, setCurrentBalance] = useState<number>(0);
Â  const [currentCreditCardBill, setCurrentCreditCardBill] = useState<number>(0); 
Â  const [transactions, setTransactions] = useState<Transaction[]>([]);
Â  const [isAddIncomeModalVisible, setIsAddIncomeModalVisible] = useState<boolean>(false);
Â  const [isAddExpenseModalVisible, setIsAddExpenseModalVisible] = useState<boolean>(false);
Â  const [isLoadingTransactions, setIsLoadingTransactions] = useState<boolean>(true);
Â  const [selectedTransactionForDetail, setSelectedTransactionForDetail] = useState<Transaction | null>(null);
Â  const [isTransactionDetailModalVisible, setIsTransactionDetailModalVisible] = useState<boolean>(false);
Â  const [showActionButtons, setShowActionButtons] = useState(false);
Â  const [transactionToEdit, setTransactionToEdit] = useState<Transaction | null>(null);
Â  const [isEditModalVisible, setIsEditModalVisible] = useState<boolean>(false);
Â  const [isCartaoDetailModalVisible, setIsCartaoDetailModalVisible] = useState<boolean>(false); 
Â  const [isPagarFaturaModalVisible, setIsPagarFaturaModalVisible] = useState<boolean>(false);
Â  const [isResgatarInvestimentoModalVisible, setIsResgatarInvestimentoModalVisible] = useState<boolean>(false);
  const [isAdjustBalanceModalVisible, setIsAdjustBalanceModalVisible] = useState<boolean>(false);

Â  const navigation = useNavigation();

Â  useEffect(() => {
Â  Â  navigation.getParent()?.setOptions({ 
Â  Â  Â  headerStyle: { backgroundColor: colors.headerBackground },
Â  Â  Â  headerTintColor: colors.headerText,
Â  Â  Â  headerLeft: () => null, 
Â  Â  Â  headerRight: () => null,
Â  Â  });
Â  }, [navigation, colors]); 

Â  useEffect(() => {
Â  Â  const loadInitialScreenData = async () => {
Â  Â  Â  if (isLoadingInitialData) {
Â  Â  Â  Â  console.log("HomeScreen Mount: Aguardando dados iniciais do contexto...");
Â  Â  Â  Â  return; 
Â  Â  Â  }
Â  Â  Â  setIsLoadingTransactions(true);
Â  Â  Â  console.log("HomeScreen Mount: Carregando transaÃ§Ãµes. Dados Iniciais Prontos:", {initialAccountBalance, initialCreditCardBill, totalInvested, creditCardLimit, userName});
Â  Â  Â  try {
        // NENHUM clearDevelopmentData AQUI
Â  Â  Â  Â  const loadedTransactions = await loadTransactions();
Â  Â  Â  Â  setTransactions(loadedTransactions);
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("HomeScreen Mount: Falha ao carregar transaÃ§Ãµes:", error);
Â  Â  Â  Â  setTransactions([]);
Â  Â  Â  } finally {
Â  Â  Â  Â  setIsLoadingTransactions(false);
Â  Â  Â  Â  console.log("HomeScreen Mount: Carregamento de transaÃ§Ãµes finalizado.");
Â  Â  Â  }
Â  Â  };
Â  Â  loadInitialScreenData();
Â  }, [isLoadingInitialData]);

Â  useEffect(() => {
Â  Â  if (isLoadingInitialData || isLoadingTransactions) {
Â  Â  Â  return;
Â  Â  }
Â  Â  console.log("EFFECT_RECALC: Recalculando. initialBalance:", initialAccountBalance, "initialBill:", initialCreditCardBill, "txCount:", transactions.length);

Â  Â  let newCurrentBalance = initialAccountBalance;
Â  Â  transactions.forEach(tr => {
Â  Â  Â  if (tr.type === 'income') {
Â  Â  Â  Â  newCurrentBalance += tr.amount;
Â  Â  Â  } else if (tr.category === "Pagamento de Fatura CC" && tr.paymentMethod === 'saldo') {
Â  Â  Â  Â  newCurrentBalance -= tr.amount; 
Â  Â  Â  } else if (tr.type === 'expense' && tr.paymentMethod === 'saldo') { 
Â  Â  Â  Â  newCurrentBalance -= tr.amount;
Â  Â  Â  } else if (tr.type === 'investment' && tr.paymentMethod === 'para_investimento') {
Â  Â  Â  Â  newCurrentBalance -= tr.amount;
Â  Â  Â  }
Â  Â  });
Â  Â  setCurrentBalance(newCurrentBalance);
Â  Â  console.log("EFFECT_RECALC: currentBalance SET TO:", newCurrentBalance);

Â  Â  let newCreditCardBill = initialCreditCardBill; 
Â  Â  transactions.forEach(tr => {
Â  Â  Â  if (tr.type === 'expense' && tr.paymentMethod === 'cartao' && tr.category !== "Pagamento de Fatura CC") {
Â  Â  Â  Â  newCreditCardBill += tr.amount;
Â  Â  Â  } else if (tr.category === "Pagamento de Fatura CC") {
Â  Â  Â  Â  newCreditCardBill -= tr.amount;
Â  Â  Â  }
Â  Â  });
Â  Â  const finalNewBill = newCreditCardBill < 0 ? 0 : newCreditCardBill;
Â  Â  setCurrentCreditCardBill(finalNewBill);
Â  Â  if (!isLoadingInitialData && !isLoadingTransactions) {
Â  Â  Â  saveCreditCardBill(finalNewBill); 
Â  Â  }
Â  Â  console.log("EFFECT_RECALC: currentCreditCardBill SET TO:", finalNewBill);

Â  }, [transactions, initialAccountBalance, initialCreditCardBill, isLoadingInitialData, isLoadingTransactions]);


Â  useEffect(() => { 
Â  Â  if (!isLoadingTransactions && !isLoadingInitialData) {
Â  Â  Â  saveTransactions(transactions); 
Â  Â  Â  console.log("EFFECT_SAVE_TX: TransaÃ§Ãµes salvas.");
Â  Â  }
Â  }, [transactions, isLoadingTransactions, isLoadingInitialData]);

Â  const handleAddIncome = (amount: number, description: string) => {
Â  Â  console.log("ADD_INCOME: Adicionando:", description, amount);
Â  Â  const newIncome: Transaction = {
Â  Â  Â  id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
Â  Â  Â  description, amount, date: new Date().toISOString(), type: 'income', paymentMethod: 'saldo', notes: `Entrada: ${description}`
Â  Â  };
Â  Â  setTransactions(prev => [newIncome, ...prev]);
Â  };

Â  type AddExpenseModalData = Omit<Transaction, 'id' | 'date' | 'type' | 'paymentMethod'> & { categoryDetails?: ExpenseCategory, paymentMethodSelection: 'saldo' | 'cartao' };
Â  const handleAddExpense = async (data: AddExpenseModalData) => {
Â  Â  console.log("ADD_EXPENSE: Adicionando:", data.description, data.amount, data.paymentMethodSelection);
Â  Â  const newExpense: Transaction = {
Â  Â  Â  id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
Â  Â  Â  date: new Date().toISOString(),
Â  Â  Â  description: data.description,
Â  Â  Â  amount: data.amount,
Â  Â  Â  type: 'expense', 
Â  Â  Â  paymentMethod: data.paymentMethodSelection,
Â  Â  Â  category: data.categoryDetails?.name,
Â  Â  Â  notes: data.notes,
Â  Â  };
Â  Â  setTransactions(prev => [newExpense, ...prev]);
Â  Â  setIsAddExpenseModalVisible(false); 
Â  };
Â  
Â  type AddTransactionData = Omit<Transaction, 'id' | 'date' | 'type'> & { categoryDetails?: ExpenseCategory; notes?: string };
Â  const handleAddTransaction = async (transactionData: AddTransactionData, isInvestmentFromFab: boolean = false) => {
Â  Â  const isInvestmentCategory = transactionData.categoryDetails?.type === 'investment';
Â  Â  const isCreditCardPayment = transactionData.categoryDetails?.type === 'cc_payment';
Â  Â  let transactionType: Transaction['type'] = 'expense';
Â  Â  if (isInvestmentFromFab || isInvestmentCategory) transactionType = 'investment';

Â  Â  console.log("ADD_TRANSACTION (Invest/CCPayment): Tipo final:", transactionType, "Data:", transactionData);

Â  Â  const newTransaction: Transaction = {
Â  Â  Â  id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
Â  Â  Â  date: new Date().toISOString(),
Â  Â  Â  description: transactionData.description, amount: transactionData.amount, type: transactionType,
Â  Â  Â  paymentMethod: isCreditCardPayment ? 'saldo' : ( (isInvestmentFromFab || isInvestmentCategory) ? 'para_investimento' : transactionData.paymentMethod!),
Â  Â  Â  category: transactionData.categoryDetails?.name || (isInvestmentFromFab ? "Investimento (App)" : (isCreditCardPayment ? "Pagamento de Fatura CC" : transactionData.description)),
Â  Â  Â  notes: transactionData.notes,
Â  Â  };
Â  Â  
Â  Â  setTransactions(prev => [newTransaction, ...prev]); 

Â  Â  if (newTransaction.type === 'investment' && newTransaction.paymentMethod === 'para_investimento') {
Â  Â  Â  console.log("ADD_TRANSACTION (INVESTMENT): totalInvested ANTES da atualizaÃ§Ã£o:", totalInvested, "Valor a adicionar:", newTransaction.amount);
Â  Â  Â  const newTotalInvested = totalInvested + newTransaction.amount;
Â  Â  Â  await updateTotalInvestedOnly(newTotalInvested); 
Â  Â  Â  console.log("ADD_TRANSACTION (INVESTMENT): totalInvested DEPOIS da atualizaÃ§Ã£o (contexto):", newTotalInvested);
Â  Â  } 
Â  };

Â  const handleDeleteTransaction = async (transactionId: string) => { const transactionToDelete = transactions.find(tr => tr.id === transactionId); if (!transactionToDelete) { Alert.alert("Erro", "TransaÃ§Ã£o nÃ£o encontrada."); return; } Alert.alert( "Confirmar ExclusÃ£o", `Excluir "${transactionToDelete.description}"?`, [ { text: "Cancelar", style: "cancel" }, { text: "Excluir", style: "destructive", onPress: async () => { setTransactions(prevTransactions => prevTransactions.filter(tr => tr.id !== transactionToDelete.id) ); if (transactionToDelete.type === 'investment' && transactionToDelete.paymentMethod === 'para_investimento') { const newTotalInvested = totalInvested - transactionToDelete.amount; await updateTotalInvestedOnly(newTotalInvested); } if (isTransactionDetailModalVisible) { setIsTransactionDetailModalVisible(false); setSelectedTransactionForDetail(null); } if (isEditModalVisible) { setIsEditModalVisible(false); setTransactionToEdit(null); } } } ], { cancelable: true } ); };
Â  const handleOpenTransactionDetailModal = (transaction: Transaction) => { setSelectedTransactionForDetail(transaction); setIsTransactionDetailModalVisible(true); };
Â  const handleOpenEditModal = (transaction: Transaction) => { setIsTransactionDetailModalVisible(false);  setTransactionToEdit(transaction); setIsEditModalVisible(true); };
Â  const handleSaveEditedTransaction = async (editedTransaction: Transaction) => { const originalTransaction = transactions.find(t => t.id === editedTransaction.id); if (!originalTransaction) { Alert.alert("Erro", "TransaÃ§Ã£o original nÃ£o encontrada."); setIsEditModalVisible(false); setTransactionToEdit(null); return; } let tempTotalInvested = totalInvested; if (originalTransaction.type === 'investment' && editedTransaction.type !== 'investment') { tempTotalInvested -= originalTransaction.amount; } else if (originalTransaction.type !== 'investment' && editedTransaction.type === 'investment') { tempTotalInvested += editedTransaction.amount; } else if (originalTransaction.type === 'investment' && editedTransaction.type === 'investment' && originalTransaction.paymentMethod === 'para_investimento' && editedTransaction.paymentMethod === 'para_investimento') { tempTotalInvested = tempTotalInvested - originalTransaction.amount + editedTransaction.amount; } if (totalInvested !== tempTotalInvested) { await updateTotalInvestedOnly(tempTotalInvested); } setTransactions(prev => prev.map(t => t.id === editedTransaction.id ? editedTransaction : t)); setIsEditModalVisible(false); setTransactionToEdit(null); Alert.alert("Sucesso", "TransaÃ§Ã£o atualizada!"); };
Â  const handleOpenGastoModal = () => { setShowActionButtons(false); setIsAddExpenseModalVisible(true); };
Â  const handleOpenEntradaModal = () => { setShowActionButtons(false); setIsAddIncomeModalVisible(true); };
Â  const handleOpenInvestimentoModal = () => { setShowActionButtons(false); Alert.prompt( "Novo Investimento", "Valor do Investimento:", async (text) => { const valorStr = text; if (valorStr) { const valor = parseFloat(valorStr.replace(',', '.')) || 0; if (valor > 0) { await handleAddTransaction({ description: "Investimento (App)", amount: valor, paymentMethod: 'para_investimento' }, true); } else { Alert.alert("Erro", "Valor invÃ¡lido para investimento.") } } }, 'plain-text', '', 'numeric' ); };
Â  const handleOpenCartaoDetailModal = () => { setIsCartaoDetailModalVisible(true); };
Â  const handlePagarFaturaPress = () => { setIsCartaoDetailModalVisible(false); setIsPagarFaturaModalVisible(true); };
  const handleConfirmPagamentoFatura = async (paymentAmount: number) => { if (paymentAmount <= 0) { Alert.alert("Valor InvÃ¡lido", "O valor do pagamento deve ser positivo."); setIsPagarFaturaModalVisible(false); return; } const categoriaPagamentoFatura = commonExpenseSuggestions.find( cat => cat.type === 'cc_payment' ); if (!categoriaPagamentoFatura) { Alert.alert("Erro de ConfiguraÃ§Ã£o", "Categoria 'Pagamento de Fatura CC' nÃ£o encontrada."); setIsPagarFaturaModalVisible(false); return; } await handleAddTransaction({ description: categoriaPagamentoFatura.name, amount: paymentAmount, categoryDetails: categoriaPagamentoFatura, notes: "Pagamento da fatura do cartÃ£o", }); setIsPagarFaturaModalVisible(false); Alert.alert("Sucesso", "Pagamento da fatura registrado!"); };
  const handleOpenResgatarInvestimentoModal = () => { setShowActionButtons(false); setIsResgatarInvestimentoModalVisible(true); };
  const handleConfirmResgateInvestimento = async (amountToWithdraw: number) => { if (amountToWithdraw <= 0) { Alert.alert("Valor InvÃ¡lido", "Resgate positivo."); return; } if (amountToWithdraw > totalInvested) { Alert.alert("Saldo Insuficiente", `NÃ£o pode resgatar ${formatCurrency(amountToWithdraw)} de ${formatCurrency(totalInvested)} investidos.`); return; } const newTotalInvested = totalInvested - amountToWithdraw; await updateTotalInvestedOnly(newTotalInvested);  handleAddIncome(amountToWithdraw, "Resgate de Investimento"); setIsResgatarInvestimentoModalVisible(false); Alert.alert("Sucesso", `Resgate de ${formatCurrency(amountToWithdraw)} realizado!`); };

Â  const themedAppStyles = getThemedStyles(colors, isDark);
Â  const listHeader = (
Â  Â  <>
      {userName && !isLoadingInitialData && !isLoadingTransactions && (
        <View style={[themedAppStyles.cardBase, themedAppStyles.welcomeCard, { marginTop: 15 }]}>
          <Text style={themedAppStyles.welcomeText}>OlÃ¡, {userName}! ðŸ‘‹</Text>
        </View>
      )}
Â  Â  Â  <BalanceDisplay 
Â  Â  Â  Â  currentBalance={currentBalance} 
Â  Â  Â  Â  creditCardBill={currentCreditCardBill} 
Â  Â  Â  Â  totalInvested={totalInvested} 
Â  Â  Â  Â  creditCardLimit={creditCardLimit} 
        initialAccountBalance={initialAccountBalance}
Â  Â  Â  Â  onOpenCartaoDetail={handleOpenCartaoDetailModal}
        onOpenResgatarInvestimentoModal={handleOpenResgatarInvestimentoModal}
Â  Â  Â  />
Â  Â  Â  <Text style={themedAppStyles.transactionHistoryTitle}>HistÃ³rico de TransaÃ§Ãµes</Text>
Â  Â  </>
Â  );

Â  if (isLoadingInitialData || isLoadingTransactions) {
Â  Â  return ( <View style={[themedAppStyles.loadingContainer, { backgroundColor: colors.background }]}><ActivityIndicator size="large" color={colors.primary} /><Text style={[themedAppStyles.loadingText, { color: colors.text }]}>Carregando dados...</Text></View> );
Â  }

Â  return (
Â  Â  <SafeAreaView style={[themedAppStyles.safeArea, { backgroundColor: colors.background }]}>
Â  Â  Â  <KeyboardAvoidingView behavior={Platform.OS === "ios" ? "padding" : "height"} style={{ flex: 1 }} keyboardVerticalOffset={Platform.OS === "ios" ? IOS_HEADER_OFFSET : 0} >
Â  Â  Â  Â  <StatusBar barStyle={isDark ? "light-content" : "dark-content"} backgroundColor={colors.background} />
Â  Â  Â  Â  <ExpenseList transactions={transactions} onOpenDetailModal={handleOpenTransactionDetailModal} headerContent={listHeader} />
Â  Â  Â  </KeyboardAvoidingView>
Â  Â  Â  <TouchableOpacity style={[themedAppStyles.fabMain, { backgroundColor: colors.primary }]} onPress={() => setShowActionButtons(!showActionButtons)} activeOpacity={0.8} > <FontAwesome name={showActionButtons ? "times" : "plus"} size={24} color="#FFF" /> </TouchableOpacity>
Â  Â  Â  {showActionButtons && ( <View style={themedAppStyles.fabActionsContainer}> <TouchableOpacity style={themedAppStyles.fabActionItem} onPress={handleOpenGastoModal}><Text style={[themedAppStyles.fabActionText, {color: colors.text}]}>Gasto</Text><View style={[themedAppStyles.fabActionButton, { backgroundColor: colors.danger }]}><FontAwesome name="shopping-cart" size={20} color="#FFF" /></View></TouchableOpacity><TouchableOpacity style={themedAppStyles.fabActionItem} onPress={handleOpenEntradaModal}><Text style={[themedAppStyles.fabActionText, {color: colors.text}]}>Entrada</Text><View style={[themedAppStyles.fabActionButton, { backgroundColor: colors.success }]}><FontAwesome name="plus" size={20} color="#FFF" /></View></TouchableOpacity><TouchableOpacity style={themedAppStyles.fabActionItem} onPress={handleOpenInvestimentoModal}><Text style={[themedAppStyles.fabActionText, {color: colors.text}]}>Investimento</Text><View style={[themedAppStyles.fabActionButton, { backgroundColor: colors.invested }]}><FontAwesome name="line-chart" size={20} color="#FFF" /></View></TouchableOpacity></View> )}
Â  Â  Â  <AddIncomeModal visible={isAddIncomeModalVisible} onClose={() => setIsAddIncomeModalVisible(false)} onAddIncome={handleAddIncome} />
Â  Â  Â  <AddExpenseModal visible={isAddExpenseModalVisible} onClose={() => setIsAddExpenseModalVisible(false)} onAddExpense={handleAddExpense} />
Â  Â  Â  {selectedTransactionForDetail && ( <TransactionDetailModal visible={isTransactionDetailModalVisible} transaction={selectedTransactionForDetail} onClose={() => { setIsTransactionDetailModalVisible(false); setSelectedTransactionForDetail(null); }} onDelete={handleDeleteTransaction} onEdit={handleOpenEditModal} /> )}
Â  Â  Â  {transactionToEdit && ( <EditTransactionModal visible={isEditModalVisible} transactionToEdit={transactionToEdit} onClose={() => { setIsEditModalVisible(false); setTransactionToEdit(null); }} onSaveEdit={handleSaveEditedTransaction} /> )}
Â  Â  Â  <CartaoDetailModal visible={isCartaoDetailModalVisible} onClose={() => setIsCartaoDetailModalVisible(false)} onPagarFaturaPress={handlePagarFaturaPress} creditCardLimit={creditCardLimit} currentCreditCardBill={currentCreditCardBill} />
Â  Â  Â  <PagarFaturaModal visible={isPagarFaturaModalVisible} onClose={() => setIsPagarFaturaModalVisible(false)} onConfirmPagamento={handleConfirmPagamentoFatura} currentBill={currentCreditCardBill} />
Â  Â  Â  <ResgatarInvestimentoModal visible={isResgatarInvestimentoModalVisible} onClose={() => setIsResgatarInvestimentoModalVisible(false)} onConfirmResgate={handleConfirmResgateInvestimento} currentTotalInvested={totalInvested} />
Â  Â  </SafeAreaView>
Â  );
}

// Estilos (getThemedStyles e getModalStyles)
const getThemedStyles = (colors: ThemeColors, isDark?: boolean) => StyleSheet.create({
Â  safeArea: { flex: 1, },
Â  loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center', },
Â  loadingText: { marginTop: 10, fontSize: 16, color: colors.text },
Â  transactionHistoryTitle: { fontSize: 18, fontWeight: 'bold', marginTop: 20, marginBottom: 10, textAlign: 'center', color: colors.text, paddingHorizontal: 15, },
Â  cardBase: { backgroundColor: colors.card, borderRadius: 12, padding: 18, marginBottom: 15, marginHorizontal: 10, shadowColor: isDark ? '#000' : '#555', shadowOffset: { width: 0, height: 2 }, shadowOpacity: isDark ? 0.30 : 0.15, shadowRadius: isDark ? 3.5 : 2.5, elevation: isDark ? 5 : 3, },
Â  welcomeCard: { paddingVertical: 20, alignItems: 'center', },
Â  welcomeText: { fontSize: 20, fontWeight: '600', color: colors.text, },
Â  headerControlsContainer: { minHeight: 1, borderBottomWidth: 0, marginBottom: 0, paddingVertical:0, paddingHorizontal:0 },
Â  fabMain: { position: 'absolute', right: 25, bottom: 25, width: 60, height: 60, borderRadius: 30, justifyContent: 'center', alignItems: 'center', elevation: 8, shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.3, shadowRadius: 3, zIndex: 10 },
Â  fabActionsContainer: { position: 'absolute', right: 25, bottom: 95, alignItems: 'flex-end', zIndex: 9 },
Â  fabActionItem: { flexDirection: 'row', alignItems: 'center', marginBottom: 18, },
Â  fabActionText: { marginRight: 12, backgroundColor: colors.card, paddingVertical: 6, paddingHorizontal: 12, borderRadius: 5, elevation: 2, shadowColor: '#000', shadowOffset: { width: 0, height: 1 }, shadowOpacity: 0.2, shadowRadius: 1, fontSize: 14, fontWeight: '500' },
Â  fabActionButton: { width: 48, height: 48, borderRadius: 24, justifyContent: 'center', alignItems: 'center', elevation: 6, shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.25, shadowRadius: 2, },
});

const getModalStyles = (colors: ThemeColors) => StyleSheet.create({
Â  keyboardAvoidingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center', },
Â  centeredView: { position: 'absolute', width: '100%', height: '100%', justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0,0,0,0.5)', },
Â  modalView: { margin: 20, borderRadius: 20, padding: 25, alignItems: 'stretch', shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.25, shadowRadius: 4, elevation: 5, width: '90%', backgroundColor: colors.card, maxHeight: '85%' },
Â  modalText: { marginBottom: 15, textAlign: 'center', fontSize: 18, fontWeight: 'bold', color: colors.text },
Â  input: { height: 45, borderWidth: 1, marginBottom: 15, paddingHorizontal: 10, width: '100%', borderRadius: 5, fontSize: 16, color: colors.text, borderColor: colors.border, backgroundColor: colors.background },
Â  buttonContainer: { flexDirection: 'row', justifyContent: 'space-between', width: '100%', marginTop: 20 },
Â  buttonSpacer: { width: 5, }
});